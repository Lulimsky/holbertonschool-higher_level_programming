<<<<<<< HEAD
============================
0-add_integer.py Module
============================

This function adds two integer: a and b. Both must be floats or integers.
If an TypeError is raised must display error message.
How to import from module:

	>>> add_integer = __import__('0-add_integer').add_integer

===========================
Documentation
===========================

	>>> module_doc = __import__("0-add_integer").__doc__
	>>> print(len(module_doc) > 0)
	True

	>>> func_doc = __import__("0-add_integer").add_integer.__doc__
	>>> print(len(func_doc) > 0)
	True

===========================
Requiriments: arguments
===========================

``add_integer()`` takes two arguments pased in main function and return adition.
both must be numbers type int or float and typecast to int. Use the ``+`` operator.

SUCCESS CASES
===========================

    
=======
The ``unittest`` module
================================

Using ``add_integer`` function
--------------------------------

This is an example text file in reStructuredText format.  First import
``factorial`` from the ``example`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

>>>>>>> db5bea9c8b8e30f61e5621714b0bff9e787118ef
    >>> add_integer(1, 2)
    3

    >>> add_integer(1.1, 2)
    3

    >>> add_integer("string", 1)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer


    >>> add_integer(None, "string")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer


<<<<<<< HEAD
    >>> print(add_integer(1.7976931348623157e+309))
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    File "<stdin>", line 6, in add_integer
    OverflowError: cannot convert float infinity to integer

    >>> print(add_integer(float("NaN")))
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    File "<stdin>", line 6, in add_integer
    ValueError: cannot convert float NaN to integer

    >>> add_integer(4, "School")
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    File "<stdin>", line 5, in add_integer
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    File "<stdin>", line 3, in add_integer
    TypeError: a must be an integer

    >>> add_integer("")
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    File "<stdin>", line 3, in add_integer
    TypeError: a must be an integer

    >>> add_integer()
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(1, 2, 3)
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
=======
    >>> add_integer(200.3, -200)
    0


    >>> add_integer(100, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer


    >>> add_integer(float('inf'), 100)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer


    >>> add_integer(float('NaN'), 100)
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer
>>>>>>> db5bea9c8b8e30f61e5621714b0bff9e787118ef
